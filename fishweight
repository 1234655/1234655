import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import numpy as np
from sklearn.model_selection import train_test_split
import pickle
import urllib.request
from sklearn.compose import make_column_transformer
from sklearn.preprocessing import OneHotEncoder, StandardScaler 
from sklearn.linear_model import LinearRegression, Ridge, Lasso, ElasticNet
from sklearn.metrics import r2_score
data = pd.read_csv("https://raw.githubusercontent.com/Jaswanth20061/testingModels/main/Fish.csv")
data.head()
data.isna().sum()
data.describe()
data[data['Weight']==0]
data = data.drop(data[data['Weight']==0].index)
data.describe()
X = data.drop("Weight", axis=1)
y = data['Weight']
X.head()
x_train, x_test, y_train, y_test = train_test_split(X,y, test_size=0.2, random_state=42,stratify=X['Species'])
print(x_train.shape, x_test.shape, y_train.shape, y_test.shape)
ct = make_column_transformer((StandardScaler(),['Length1','Length2','Length3','Height','Width']),(OneHotEncoder(handle_unknown="ignore"), ["Species"]))
x_train_normalize = pd.DataFrame(ct.fit_transform(x_train))
x_test_normalize = pd.DataFrame(ct.transform(x_test))
x_train_normalize.head()
def models(model_name, x_train, y_train):
    if model_name=="Linear_Regression":
        reg = LinearRegression()
    elif model_name=="Lasso":
      reg = Lasso(alpha=0.1,tol=0.03)
    elif model_name=="ElasticNet":
        reg = ElasticNet(random_state=0)
    elif model_name=="Ridge":
        reg = Ridge(alpha=1.0)
    else:
        print("please enter correct regressor name")
    reg.fit(x_train,y_train)
    return reg
    model_list = ["Linear_Regression","Lasso","ElasticNet","Ridge"]
result_scores = []

for model in model_list:
    reg = models(model, x_train_normalize, y_train)
    predictions = reg.predict(x_test_normalize)
    r2score_metric = r2_score(y_test,predictions)
    result_scores.append((model,round(r2score_metric,3)))

df_result_scores = pd.DataFrame(result_scores,columns=["Linear model","r2score"])
df_result_scores
def plotCharts(title,features,truelabels,predictions):
  plt.figure(figsize=(18,7))
  plt.subplot(1, 2, 1) 
  plt.scatter(range(0,len(features)), predictions,color="blue",label="predicted")
  plt.scatter(range(0,len(features)), truelabels,color="red",label="True value")
  plt.title(title)
  plt.legend()

  plt.subplot(1, 2, 2) 
  plt.plot(range(0,len(features)), predictions,color="blue",label="predicted")
  plt.plot(range(0,len(features)), truelabels,color="red",label="True value")
  plt.legend()
  plt.title(title)
  plt.show()
  reg = LinearRegression()
reg.fit(x_train_normalize,y_train)
plotCharts("Training",x_train_normalize,y_train,reg.predict(x_train_normalize))
plotCharts("Testing",x_test_normalize,y_test,reg.predict(x_test_normalize))
pickle.dump(reg, open("linear_regression_model", 'wb'))
pickle.dump(ct, open("column_transform", 'wb'))
def getPredictions(filepath,model,ct):
  data = pd.read_csv(filepath)
  test_data = data.drop(['Weight'], axis=1, errors='ignore')
  test_data = pd.DataFrame(ct.transform(test_data))
  predictions = model.predict(test_data)
  data['predicted_weights'] = predictions.tolist()
  return data
  if __name__ == "__main__":
  test_filepath = "https://raw.githubusercontent.com/Jaswanth20061/testingModels/main/test_fish.csv"
  model = pickle.load(urllib.request.urlopen("https://github.com/Jaswanth20061/testingModels/blob/main/linear_regression_model?raw=true"))
  ct = pickle.load(urllib.request.urlopen("https://github.com/Jaswanth20061/testingModels/blob/main/column_transform?raw=true"))
  df = getPredictions(test_filepath,model,ct)
  print(df)
  
